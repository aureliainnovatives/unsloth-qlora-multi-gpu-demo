#!/bin/bash

# QLoRA Multi-GPU Training Demonstration Commands
# This script provides clear commands to demonstrate single vs multi-GPU training

echo "=========================================="
echo "QLoRA Multi-GPU Training Demo Commands"
echo "=========================================="

echo ""
echo "STEP 1: Check GPU availability"
echo "------------------------------"
echo "nvidia-smi"
echo "python -c \"import torch; print(f'GPUs available: {torch.cuda.device_count()}')\""

echo ""
echo "STEP 2: Setup Environment (run once)"
echo "------------------------------------"
echo "pip install -r requirements.txt"
echo "accelerate config  # Choose Multi-GPU, bf16, no DeepSpeed"

echo ""
echo "STEP 3: SINGLE GPU Training Demo"
echo "--------------------------------"
echo "# Method 1: Force single GPU via environment variable"
echo "CUDA_VISIBLE_DEVICES=0 python train.py"
echo ""
echo "# Method 2: Force single GPU via command line argument"
echo "python train.py --force-single-gpu"
echo ""
echo "# Monitor single GPU training in another terminal:"
echo "python monitor_gpu.py --output single_gpu_monitor.json"

echo ""
echo "STEP 4: MULTI-GPU Training Demo"
echo "-------------------------------"
echo "# Method 1: Use accelerate launcher (recommended)"
echo "accelerate launch train.py"
echo ""
echo "# Method 2: Specify specific GPUs"
echo "python train.py --gpu-ids 0,1"
echo ""
echo "# Monitor multi-GPU training in another terminal:"
echo "python monitor_gpu.py --output multi_gpu_monitor.json"

echo ""
echo "STEP 5: Monitor Training with GPU Usage"
echo "---------------------------------------"
echo "# Monitor training automatically"
echo "python monitor_gpu.py --monitor-training 'accelerate launch train.py'"
echo ""
echo "# Quick GPU check anytime"
echo "nvidia-smi"
echo "python monitor_gpu.py --snapshot"

echo ""
echo "STEP 6: Compare Results"
echo "----------------------"
echo "# View monitoring results"
echo "python -c \"import json; data=json.load(open('single_gpu_monitor.json')); print('Single GPU avg utilization:', sum(s['gpus'][0]['gpu_util_percent'] for s in data['snapshots'])/len(data['snapshots']))\""
echo "python -c \"import json; data=json.load(open('multi_gpu_monitor.json')); print('Multi GPU avg utilization GPU 0:', sum(s['gpus'][0]['gpu_util_percent'] for s in data['snapshots'])/len(data['snapshots']), 'GPU 1:', sum(s['gpus'][1]['gpu_util_percent'] for s in data['snapshots'])/len(data['snapshots']) if len(data['snapshots'][0]['gpus']) > 1 else 'N/A')\""

echo ""
echo "CONFIGURATION TOGGLES IN CODE:"
echo "------------------------------"
echo "# In config.py, you can toggle:"
echo "# use_multi_gpu = True/False"
echo "# force_single_gpu = True/False"
echo "# gpu_device_ids = [0, 1] or None"

echo ""
echo "KEY INDICATORS OF MULTI-GPU USAGE:"
echo "----------------------------------"
echo "1. Training output shows: 'MULTI-GPU MODE - Using all X GPUs'"
echo "2. nvidia-smi shows multiple GPUs with high utilization"
echo "3. Monitor script shows utilization on multiple GPUs"
echo "4. Accelerate logs show multiple processes"
echo "5. Training speed increases with more GPUs"

echo ""
echo "TROUBLESHOOTING:"
echo "---------------"
echo "# If multi-GPU not working:"
echo "# 1. Check: accelerate config"
echo "# 2. Ensure: CUDA_VISIBLE_DEVICES is not set to single GPU"
echo "# 3. Verify: torch.cuda.device_count() > 1"
echo "# 4. Try: accelerate launch --multi_gpu train.py"